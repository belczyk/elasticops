// Signature file for parser generated by fsyacc
module ElasticOps.Parsing.IntellisenseParser
type token = 
  | EOF
  | ONE_OF
  | RIGHT_PARENTHESIS
  | LEFT_PARENTHESIS
  | ANY_PATH
  | ANY_PROPERTY
  | UNFINISHED_VALUE of (string * ElasticOps.Parsing.JsonValueType)
  | COMPLETION_MACRO of (string)
  | COMMA
  | COLON
  | RIGHT_BRACK
  | LEFT_BRACK
  | RIGHT_BRACE
  | LEFT_BRACE
  | STRING of (string)
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ONE_OF
    | TOKEN_RIGHT_PARENTHESIS
    | TOKEN_LEFT_PARENTHESIS
    | TOKEN_ANY_PATH
    | TOKEN_ANY_PROPERTY
    | TOKEN_UNFINISHED_VALUE
    | TOKEN_COMPLETION_MACRO
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACE
    | TOKEN_LEFT_BRACE
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_value
    | NONTERM_object_fields
    | NONTERM_rev_object_fields
    | NONTERM_one_of_values
    | NONTERM_rev_one_of_values
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (ElasticOps.Parsing.IntellisenseValue option) 
