%{
open ElasticOps.Parsing.Structures
%}

%start start

%token <int> INT
%token <float> FLOAT
%token <string> ID
%token <string> STRING
%token TRUE
%token FALSE
%token NULL
%token LEFT_BRACE
%token RIGHT_BRACE
%token LEFT_BRACK
%token RIGHT_BRACK
%token COLON
%token COMMA
%token EOF
%type <ElasticOps.Parsing.Structures.JsonValue option> start

%%
start: prog {  $1 }

prog:
  | EOF       { None }
  | value { Some $1 }

value:
  | LEFT_BRACE object_fields RIGHT_BRACE { ElasticOps.Parsing.Structures.Assoc $2 }
  | LEFT_BRACK array_values RIGHT_BRACK { ElasticOps.Parsing.Structures.List $2 }
  | STRING { ElasticOps.Parsing.Structures.String $1 }
  | INT { ElasticOps.Parsing.Structures.Int $1 }
  | FLOAT { ElasticOps.Parsing.Structures.Float $1 }
  | TRUE { ElasticOps.Parsing.Structures.Bool true }
  | FALSE { ElasticOps.Parsing.Structures.Bool false }
  | NULL { ElasticOps.Parsing.Structures.Null }

object_fields: rev_object_fields { List.rev $1 };

rev_object_fields:
  | { [] }
  | STRING COLON value {[($1,$3)]}
  | rev_object_fields COMMA STRING COLON value
    { ($3, $5) :: $1 }

array_values:
  | { [] }
  | rev_values { List.rev $1 }

rev_values:
  | value { [$1] }
  | rev_values COMMA value { $3 :: $1 }