{

//This lexer has been writen with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chepter 15)

module Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing
open ElasticOps.Parsing.Structures
open System

exception SyntaxError of string

let lexeme = LexBuffer.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

(* part 1 *)
let int = '-'? ['0'-'9'] ['0'-'9']*

(* part 2 *)
let digit = ['0'-'9']
let frac = '.' digit*
let exp = ['e' 'E'] ['-' '+']? digit+
let float = digit* frac? exp?

(* part 3 *)
let white = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"
let id = ['a'-'z' 'A'-'Z' '_'] ['a'-'z' 'A'-'Z' '0'-'9' '_']*

(* part 4 *)
rule read =
  parse
  | white    { read lexbuf }
  | newline  { newline lexbuf; read lexbuf }
  | int      { INT (Int32.Parse(lexeme lexbuf)) }
  | float    { FLOAT (float (lexeme lexbuf)) }
  | "true"   { TRUE }
  | "false"  { FALSE }
  | "null"   { NULL }
  | '"'      { read_string "" false lexbuf} 
  | '{'      { LEFT_BRACE }
  | '}'      { RIGHT_BRACE }
  | '['      { LEFT_BRACK }
  | ']'      { RIGHT_BRACK }
  | ':'      { COLON }
  | ','      { COMMA }
  | _ { raise (SyntaxError ("Unexpected char: " ^ lexeme lexbuf)) }
  | eof      { EOF }

(* part 5 *)
and read_string str ignorequote =
  parse
  | '"' { if ignorequote  then (read_string (str+"\\\"") false lexbuf) else STRING (str) }
  | '\\'  { read_string str true lexbuf}
  | [^ '"' '\\']+
    { read_string (str+(lexeme lexbuf)) false lexbuf}
  | _ { raise (SyntaxError ("Illegal string character: " ^ (lexeme lexbuf))) }
  | eof { raise (SyntaxError ("String is not terminated")) }