{

module IntellisenseLexer

open Microsoft.FSharp.Text.Lexing
open ElasticOps.Parsing.Structures
open System
open IntellisenseParser

exception SyntaxError of string

let lexeme = LexBuffer<Char>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

let white = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"
let id = ['a'-'z' 'A'-'Z' '_'] ['a'-'z' 'A'-'Z' '0'-'9' '_']*
let completionMacro = '|' id '|'

rule read =
  parse
  | white           { read lexbuf }
  | newline         { newline lexbuf; read lexbuf }
  | '"'             { read_string "" false lexbuf }
  | '{'             { LEFT_BRACE }
  | '}'             { RIGHT_BRACE }
  | '['             { LEFT_BRACK }
  | ']'             { RIGHT_BRACK }
  | ':'             { COLON }
  | ','             { COMMA }
  | "AnyProperty"   {ANY_PROPERTY}
  | completionMacro {COMPLETION_MACRO (lexeme lexbuf)}
  | id              { ID(lexeme lexbuf) }
  | eof             { EOF }
  | _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }


and read_string str ignorequote =
  parse
  | '"' { if ignorequote  then (read_string (str+"\\\"") false lexbuf) else STRING (str)}
  | '\\'  { read_string str true lexbuf}
  | [^ '"' '\\']+ { read_string (str+(lexeme lexbuf)) false lexbuf}
  | eof { raise (new Exception("Unterminated string.")) }